{"version":3,"file":"is-equal.js","sourceRoot":"","sources":["is-equal.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,SAAS,QAAQ,CAAC,IAAI;IAClB,OAAO,CAAC,IAAI,IAAI,OAAO,IAAI,KAAK,QAAQ,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;AACtE,CAAC;AAED,SAAS,OAAO,CAAC,IAAI;IACjB,OAAO,CAAC,IAAI,IAAI,OAAO,IAAI,KAAK,QAAQ,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;AACrE,CAAC;AAED,SAAS,OAAO,CAAC,CAAS,EAAE,CAAS;IACjC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE;QAC9B,MAAM,KAAK,CAAC,cAAc,CAAC,CAAC;KAC/B;IAED,SAAS,OAAO,CAAC,CAAS,EAAE,CAAS;QAEjC,IAAI,GAAG,GAAG,IAAI,CAAC;QAEf,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,UAAC,EAAE;YACtB,IAAI,KAAK,GAAG,KAAK,CAAC;YAClB,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,UAAC,EAAE;gBACtB,IAAI,EAAE,KAAK,EAAE,IAAI,OAAO,CAAC,CAAC,EAAE,CAAC,KAAK,OAAO,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE;oBACtG,KAAK,GAAG,IAAI,CAAC;iBAChB;qBAAM,IAAI,EAAE,KAAK,EAAE,IAAI,OAAO,CAAC,CAAC,EAAE,CAAC,KAAK,OAAO,CAAC,CAAC,EAAE,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;oBACzF,KAAK,GAAG,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;iBACjC;YAEL,CAAC,CAAC,CAAC;YAEH,GAAG,GAAG,GAAG,IAAI,KAAK,CAAC;QACvB,CAAC,CAAC,CAAC;QAEH,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;QAC1B,OAAO,GAAG,CAAC;IACf,CAAC;IAGD,OAAO,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC1C,CAAC","sourcesContent":["/**\n * @description deeply compares objects by value\n * @example\n * const a = {a: 1, b: {c: 3, d: 5}};\n * const b = {b: {c: 3, d: 5}, a: 1};\n * isEqual(a, b) // returns true\n */\n\nfunction isObject(item) {\n    return (item && typeof item === 'object' && !Array.isArray(item));\n}\n\nfunction isArray(item) {\n    return (item && typeof item === 'object' && Array.isArray(item));\n}\n\nfunction isEqual(a: object, b: object): boolean {\n    if (!isObject(a) || !isObject(b)) {\n        throw Error(\"not an objct\");\n    }\n\n    function compare(a: object, b: object): boolean {\n\n        let res = true;\n\n        Object.keys(a).forEach((ka) => {\n            let found = false;\n            Object.keys(b).forEach((kb) => {\n                if (ka === kb && typeof a[ka] === typeof b[kb] && !isObject(a[ka]) && !isArray(a[ka]) && a[ka] === b[kb]) {\n                    found = true;\n                } else if (ka === kb && typeof a[ka] === typeof b[kb] && isObject(a[ka]) && isObject(b[kb])) {\n                    found = compare(a[ka], b[kb]);\n                }\n\n            });\n\n            res = res && found;\n        });\n\n        console.log(\"res: \", res);\n        return res;\n    }\n\n\n    return compare(a, b) && compare(b, a);\n}"]}