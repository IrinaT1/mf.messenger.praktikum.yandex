{"version":3,"file":"Field.js","sourceRoot":"","sources":["Field.ts"],"names":[],"mappings":"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","sourcesContent":["export class Field {\n    private validationConditions: Record<string, Function>[];\n    private errorNode: HTMLSelectElement;\n    private label: string;\n    \n    constructor(public fieldName: string, public fieldNode: HTMLSelectElement) {\n        this.validationConditions = [];\n\n        this.errorNode = this.fieldNode.parentElement.querySelector(\".error-text\");\n        this.label = this.fieldNode.parentElement.querySelector(\".inputtext-floating-label\").textContent;\n\n        let self = this;\n\n        this.setValidationCondition(function() {return self.fieldNode.validity.typeMismatch; }, `Please enter valid ${self.label}`);\n        this.setValidationCondition(function() {return self.fieldNode.validity.valueMissing; }, `${self.label} can't be blank`);\n    }\n\n    get value(): string {\n        return this.fieldNode.value;\n    }\n\n\n    setValidationCondition(f: Function, errorText: string) :void {\n        let condition = {};\n        condition[errorText] = f;\n        this.validationConditions.push(condition);\n    }\n\n    addListeners(): void {\n        let self = this;\n        this.fieldNode.addEventListener(\"focusout\", function (event) {\n            self.showError();\n        });\n\n        this.fieldNode.addEventListener(\"focusin\", function (event) {\n            self.hideError();\n        });\n    }\n\n    hasError(): boolean {\n        for (let condition of this.validationConditions) {\n            let error = Object.keys(condition)[0];\n            let f = condition[error];\n\n            if (f(this.value)) {\n                return true;              \n            }\n        } \n        return false;       \n    }\n\n    showError(): void {\n        for (let condition of this.validationConditions) {\n            let error = Object.keys(condition)[0];\n            let f = condition[error];\n\n            if (f(this.value)) {\n                this.fieldNode.setCustomValidity(error);\n                this.errorNode.textContent = error;\n                this.fieldNode.classList.add('error');                \n            }\n        }\n    }\n\n    hideError(): void {\n        this.fieldNode.setCustomValidity(\"\");\n        this.errorNode.textContent = \"\";\n        this.fieldNode.classList.remove('error');\n    }\n}"]}