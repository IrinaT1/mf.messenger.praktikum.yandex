{"version":3,"file":"formValidation.js","sourceRoot":"","sources":["formValidation.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,KAAK,EAAC,MAAM,YAAY,CAAA;AAEhC;IAEI,wBAAoB,YAAoB;QAApB,iBAAY,GAAZ,YAAY,CAAQ;QACpC,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;IACrB,CAAC;IAED,sBAAI,mCAAO;aAAX;YACI,OAAO,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACrD,CAAC;;;OAAA;IAED,sCAAa,GAAb,UAAc,SAAiB,EAAE,yBAAwD;QAAxD,0CAAA,EAAA,8BAAwD;QAErF,IAAI,UAAU,GAAsB,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,WAAS,SAAS,MAAG,CAAC,CAAC;QACtF,IAAI,KAAK,GAAG,IAAI,KAAK,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;QAC7C,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;YAC9B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC3B;QAED,KAAsB,UAAsC,EAAtC,KAAA,MAAM,CAAC,IAAI,CAAC,yBAAyB,CAAC,EAAtC,cAAsC,EAAtC,IAAsC,EAAE;YAAzD,IAAI,SAAS,SAAA;YACd,KAAK,CAAC,sBAAsB,CAAC,yBAAyB,CAAC,SAAS,CAAC,EAAE,SAAS,CAAC,CAAC;SACjF;QAED,KAAK,CAAC,YAAY,EAAE,CAAC;IACzB,CAAC;IAED,0CAAiB,GAAjB;QACI,IAAM,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,QAAQ,EAAE,EAAhB,CAAgB,CAAC,CAAC,CAAC;QAC7D,OAAO,KAAK,IAAI,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC;IACjD,CAAC;IAED,mCAAU,GAAV;QACI,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAC,KAAK;YACtB,KAAK,CAAC,SAAS,EAAE,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAED,mCAAU,GAAV;QACI,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAC,KAAK;YACtB,KAAK,CAAC,SAAS,EAAE,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAED,sBAAI,kCAAM;aAAV;YACI,IAAI,GAAG,GAAG,EAAE,CAAC;YACb,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAC,KAAK;gBACtB,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC;YACvC,CAAC,CAAC,CAAC;YACH,OAAO,GAAG,CAAC;QACf,CAAC;;;OAAA;IAED,8BAAK,GAAL,UAAM,IAAY;QACd,IAAI,MAAa,CAAC;QAClB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAC,KAAK;YACtB,IAAI,KAAK,CAAC,SAAS,KAAK,IAAI,EAAE;gBAC1B,MAAM,GAAG,KAAK,CAAC;aAClB;QACL,CAAC,CAAC,CAAC;QACH,OAAO,MAAM,CAAC;IAClB,CAAC;IACL,qBAAC;AAAD,CAAC,AA3DD,IA2DC","sourcesContent":["import {Field} from \"./field.js\"\n\nexport class FormValidation {\n    private fields: Array<Field>;\n    constructor(private formSelector: string) {\n        this.fields = []; \n    }\n\n    get formRef(): HTMLSelectElement {\n        return document.querySelector(this.formSelector); \n    }\n\n    setValidation(fieldName: string, validationConditionObject: Record<string, Function> = {}) {\n\n        let inputField: HTMLSelectElement = this.formRef.querySelector(`[name=${fieldName}]`);\n        let field = new Field(fieldName, inputField);\n        if (!this.fields.includes(field)) {\n            this.fields.push(field);\n        }\n\n        for (let errorText of Object.keys(validationConditionObject)) {\n            field.setValidationCondition(validationConditionObject[errorText], errorText);\n        }\n\n        field.addListeners();\n    }\n\n    checkFormValidity(): boolean {\n        const valid = !(this.fields.some(field => field.hasError())); \n        return valid && this.formRef.checkValidity();\n    }\n\n    showErrors(): void {\n        this.fields.forEach((field) => {\n            field.showError();\n        });\n    }\n\n    hideErrors(): void {\n        this.fields.forEach((field) => {\n            field.hideError();\n        });\n    }\n\n    get values(): Record<string, string> {\n        let obj = {};\n        this.fields.forEach((field) => {\n            obj[field.fieldName] = field.value;\n        });\n        return obj;\n    }\n\n    field(name: string): Field {\n        let result: Field;\n        this.fields.forEach((field) => {\n            if (field.fieldName === name) {\n                result = field;\n            }\n        }); \n        return result;      \n    }\n}"]}